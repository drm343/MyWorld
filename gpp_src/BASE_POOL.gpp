#define CONCAT #1#2
#define CONCAT_LINE #1_#2
#define ITEM CONCAT(CONTENT,_Item)
#define POOL CONCAT(CONTENT,_Pool)
#define EXPORT(func) CONCAT_LINE(POOL,func)
\#include "POOL.h"

/** \file
 * 
 * 此結構與程式由 gpp 自動產生。
 * 請修改 BASE_POOL.gpp。
 */

POOL* EXPORT(start)(uint8_t max_size)
{
    POOL *result = calloc(1, sizeof(POOL));
    CONTENT *instance = calloc(max_size, sizeof(CONTENT));
    ITEM *pool = calloc(max_size, sizeof(ITEM));

    CONTENT *content = NULL;
    ITEM *item = NULL;

    result->pool = pool;
    result->item = instance;
    result->max_size = max_size;

    for (uint8_t index = 0; index < max_size; index++) {
        content = &(result->item[index]);

        item = &(result->pool[index]);
        item->is_used = false;
        item->content = content;
    }
    return result;
}

void EXPORT(stop)(POOL *access)
{
    free(access->pool);
    free(access->item);
    free(access);
}

CONTENT* EXPORT(malloc)(POOL *access)
{
    CONTENT *content = NULL;
    ITEM *item = NULL;
    uint8_t max_size = access->max_size;

    for (uint8_t index = 0; index < max_size; index++) {
        item = &(access->pool[index]);

        if (item->is_used == false) {
            item->is_used = true;
            content = item->content;
            break;
        }
    }
    return content;
}
